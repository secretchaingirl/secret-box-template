"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.base64TendermintPubkeyToValconsAddress = exports.tendermintPubkeyToValconsAddress = exports.validatorAddressToSelfDelegatorAddress = exports.selfDelegatorAddressToValidatorAddress = exports.base64PubkeyToAddress = exports.pubkeyToAddress = void 0;
const encoding_1 = require("@cosmjs/encoding");
const ripemd160_1 = require("@noble/hashes/ripemd160");
const sha256_1 = require("@noble/hashes/sha256");
const bech32_1 = require("bech32");
/**
 * Convert a secp256k1 compressed public key to a address
 *
 * @param {Uint8Array} pubkey The account's pubkey, should be 33 bytes (compressed secp256k1)
 * @param {String} [prefix="secret"] The address' bech32 prefix. Defaults to `"secret"`.
 * @returns the account's address
 */
function pubkeyToAddress(pubkey, prefix = "secret") {
    return bech32_1.bech32.encode(prefix, bech32_1.bech32.toWords((0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(pubkey))));
}
exports.pubkeyToAddress = pubkeyToAddress;
/**
 * Convert a secp256k1 compressed public key to a address
 *
 * @param {Uint8Array} pubkey The account's pubkey as base64 string, should be 33 bytes (compressed secp256k1)
 * @param {String} [prefix="secret"] The address' bech32 prefix. Defaults to `"secret"`.
 * @returns the account's address
 */
function base64PubkeyToAddress(pubkey, prefix = "secret") {
    return pubkeyToAddress((0, encoding_1.fromBase64)(pubkey), prefix);
}
exports.base64PubkeyToAddress = base64PubkeyToAddress;
/**
 * Convert self delegator address to validator address
 *
 * @param {String} selfDelegator The self delegator bech32 encoded address
 * @param {String} [prefix="secret"] The self delegator address' bech32 prefix. Defaults to `"secret"`.
 * @returns the account's address
 */
function selfDelegatorAddressToValidatorAddress(selfDelegator, prefix = "secret") {
    return bech32_1.bech32.encode(`${prefix}valoper`, bech32_1.bech32.decode(selfDelegator).words);
}
exports.selfDelegatorAddressToValidatorAddress = selfDelegatorAddressToValidatorAddress;
/**
 * Convert self delegator address to validator address
 *
 * @param {String} validator The validator bech32 encoded address
 * @param {String} [prefix="secret"] The self delegator address' bech32 prefix. Defaults to `"secret"`.
 * @returns the account's address
 */
function validatorAddressToSelfDelegatorAddress(validator, prefix = "secret") {
    return bech32_1.bech32.encode(prefix, bech32_1.bech32.decode(validator).words);
}
exports.validatorAddressToSelfDelegatorAddress = validatorAddressToSelfDelegatorAddress;
/**
 * Convert a Tendermint ed25519 public key to a consensus address
 *
 * @param {Uint8Array} pubkey The tendermint pubkey, should be 32 bytes (ed25519)
 * @param {String} [prefix="secret"] The valcons address' bech32 prefix. Defaults to `"secret"`.
 * @returns the valcons account's address
 */
function tendermintPubkeyToValconsAddress(pubkey, prefix = "secret") {
    return bech32_1.bech32.encode(`${prefix}valcons`, bech32_1.bech32.toWords((0, sha256_1.sha256)(pubkey).slice(0, 20)));
}
exports.tendermintPubkeyToValconsAddress = tendermintPubkeyToValconsAddress;
/**
 * Convert a secp256k1 compressed public key to a address
 *
 * @param {Uint8Array} pubkey The account's pubkey as base64 string, should be 33 bytes (compressed secp256k1)
 * @param {String} [prefix="secret"] The address' bech32 prefix. Defaults to `"secret"`.
 * @returns the account's address
 */
function base64TendermintPubkeyToValconsAddress(pubkey, prefix = "secret") {
    return tendermintPubkeyToValconsAddress((0, encoding_1.fromBase64)(pubkey), prefix);
}
exports.base64TendermintPubkeyToValconsAddress = base64TendermintPubkeyToValconsAddress;
//# sourceMappingURL=utils.js.map