import { grpc } from "@improbable-eng/grpc-web";
import * as _m0 from "protobufjs/minimal";
import { ContractInfo } from "../../../secret/compute/v1beta1/types";
import { Empty } from "../../../google/protobuf/empty";
import { StringEvent } from "../../../cosmos/base/abci/v1beta1/abci";
export declare const protobufPackage = "secret.compute.v1beta1";
export interface QuerySecretContractRequest {
    /** address is the bech32 human readable address of the contract */
    contractAddress: string;
    query: Uint8Array;
}
export interface QueryByLabelRequest {
    label: string;
}
export interface QueryByContractAddressRequest {
    /** address is the bech32 human readable address of the contract */
    contractAddress: string;
}
export interface QueryByCodeIDRequest {
    codeId: string;
}
export interface QuerySecretContractResponse {
    data: Uint8Array;
}
/** QueryContractInfoResponse is the response type for the Query/ContractInfo RPC method */
export interface QueryContractInfoResponse {
    /** contract_address is the bech32 human readable address of the contract */
    contractAddress: string;
    ContractInfo?: ContractInfo;
}
/** ContractInfoWithAddress adds the contract address to the ContractInfo representation */
export interface ContractInfoWithAddress {
    /** contract_address is the bech32 human readable address of the contract */
    contractAddress: string;
    ContractInfo?: ContractInfo;
}
export interface QueryContractsByCodeIDResponse {
    contractInfos: ContractInfoWithAddress[];
}
export interface CodeInfoResponse {
    codeId: string;
    /** creator is the bech32 human readable address of the contract */
    creator: string;
    codeHash: string;
    source: string;
    builder: string;
}
export interface QueryCodeResponse {
    codeInfo?: CodeInfoResponse;
    wasm: Uint8Array;
}
export interface QueryCodesResponse {
    codeInfos: CodeInfoResponse[];
}
export interface QueryContractAddressResponse {
    /** address is the bech32 human readable address of the contract */
    contractAddress: string;
}
export interface QueryContractLabelResponse {
    label: string;
}
export interface QueryCodeHashResponse {
    codeHash: string;
}
/** DecryptedAnswer is a struct that represents a decrypted tx-query */
export interface DecryptedAnswer {
    type: string;
    input: string;
    outputData: string;
    outputDataAsString: string;
    outputLogs: StringEvent[];
    outputError: Uint8Array;
    plaintextError: string;
}
export declare const QuerySecretContractRequest: {
    encode(message: QuerySecretContractRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QuerySecretContractRequest;
    fromJSON(object: any): QuerySecretContractRequest;
    toJSON(message: QuerySecretContractRequest): unknown;
    fromPartial<I extends {
        contractAddress?: string | undefined;
        query?: Uint8Array | undefined;
    } & {
        contractAddress?: string | undefined;
        query?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof QuerySecretContractRequest>, never>>(object: I): QuerySecretContractRequest;
};
export declare const QueryByLabelRequest: {
    encode(message: QueryByLabelRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryByLabelRequest;
    fromJSON(object: any): QueryByLabelRequest;
    toJSON(message: QueryByLabelRequest): unknown;
    fromPartial<I extends {
        label?: string | undefined;
    } & {
        label?: string | undefined;
    } & Record<Exclude<keyof I, "label">, never>>(object: I): QueryByLabelRequest;
};
export declare const QueryByContractAddressRequest: {
    encode(message: QueryByContractAddressRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryByContractAddressRequest;
    fromJSON(object: any): QueryByContractAddressRequest;
    toJSON(message: QueryByContractAddressRequest): unknown;
    fromPartial<I extends {
        contractAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
    } & Record<Exclude<keyof I, "contractAddress">, never>>(object: I): QueryByContractAddressRequest;
};
export declare const QueryByCodeIDRequest: {
    encode(message: QueryByCodeIDRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryByCodeIDRequest;
    fromJSON(object: any): QueryByCodeIDRequest;
    toJSON(message: QueryByCodeIDRequest): unknown;
    fromPartial<I extends {
        codeId?: string | undefined;
    } & {
        codeId?: string | undefined;
    } & Record<Exclude<keyof I, "codeId">, never>>(object: I): QueryByCodeIDRequest;
};
export declare const QuerySecretContractResponse: {
    encode(message: QuerySecretContractResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QuerySecretContractResponse;
    fromJSON(object: any): QuerySecretContractResponse;
    toJSON(message: QuerySecretContractResponse): unknown;
    fromPartial<I extends {
        data?: Uint8Array | undefined;
    } & {
        data?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, "data">, never>>(object: I): QuerySecretContractResponse;
};
export declare const QueryContractInfoResponse: {
    encode(message: QueryContractInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractInfoResponse;
    fromJSON(object: any): QueryContractInfoResponse;
    toJSON(message: QueryContractInfoResponse): unknown;
    fromPartial<I extends {
        contractAddress?: string | undefined;
        ContractInfo?: {
            codeId?: string | undefined;
            creator?: Uint8Array | undefined;
            label?: string | undefined;
            created?: {
                blockHeight?: string | undefined;
                txIndex?: string | undefined;
            } | undefined;
            ibcPortId?: string | undefined;
        } | undefined;
    } & {
        contractAddress?: string | undefined;
        ContractInfo?: ({
            codeId?: string | undefined;
            creator?: Uint8Array | undefined;
            label?: string | undefined;
            created?: {
                blockHeight?: string | undefined;
                txIndex?: string | undefined;
            } | undefined;
            ibcPortId?: string | undefined;
        } & {
            codeId?: string | undefined;
            creator?: Uint8Array | undefined;
            label?: string | undefined;
            created?: ({
                blockHeight?: string | undefined;
                txIndex?: string | undefined;
            } & {
                blockHeight?: string | undefined;
                txIndex?: string | undefined;
            } & Record<Exclude<keyof I["ContractInfo"]["created"], keyof import("../../../secret/compute/v1beta1/types").AbsoluteTxPosition>, never>) | undefined;
            ibcPortId?: string | undefined;
        } & Record<Exclude<keyof I["ContractInfo"], keyof ContractInfo>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof QueryContractInfoResponse>, never>>(object: I): QueryContractInfoResponse;
};
export declare const ContractInfoWithAddress: {
    encode(message: ContractInfoWithAddress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ContractInfoWithAddress;
    fromJSON(object: any): ContractInfoWithAddress;
    toJSON(message: ContractInfoWithAddress): unknown;
    fromPartial<I extends {
        contractAddress?: string | undefined;
        ContractInfo?: {
            codeId?: string | undefined;
            creator?: Uint8Array | undefined;
            label?: string | undefined;
            created?: {
                blockHeight?: string | undefined;
                txIndex?: string | undefined;
            } | undefined;
            ibcPortId?: string | undefined;
        } | undefined;
    } & {
        contractAddress?: string | undefined;
        ContractInfo?: ({
            codeId?: string | undefined;
            creator?: Uint8Array | undefined;
            label?: string | undefined;
            created?: {
                blockHeight?: string | undefined;
                txIndex?: string | undefined;
            } | undefined;
            ibcPortId?: string | undefined;
        } & {
            codeId?: string | undefined;
            creator?: Uint8Array | undefined;
            label?: string | undefined;
            created?: ({
                blockHeight?: string | undefined;
                txIndex?: string | undefined;
            } & {
                blockHeight?: string | undefined;
                txIndex?: string | undefined;
            } & Record<Exclude<keyof I["ContractInfo"]["created"], keyof import("../../../secret/compute/v1beta1/types").AbsoluteTxPosition>, never>) | undefined;
            ibcPortId?: string | undefined;
        } & Record<Exclude<keyof I["ContractInfo"], keyof ContractInfo>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof ContractInfoWithAddress>, never>>(object: I): ContractInfoWithAddress;
};
export declare const QueryContractsByCodeIDResponse: {
    encode(message: QueryContractsByCodeIDResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractsByCodeIDResponse;
    fromJSON(object: any): QueryContractsByCodeIDResponse;
    toJSON(message: QueryContractsByCodeIDResponse): unknown;
    fromPartial<I extends {
        contractInfos?: {
            contractAddress?: string | undefined;
            ContractInfo?: {
                codeId?: string | undefined;
                creator?: Uint8Array | undefined;
                label?: string | undefined;
                created?: {
                    blockHeight?: string | undefined;
                    txIndex?: string | undefined;
                } | undefined;
                ibcPortId?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        contractInfos?: ({
            contractAddress?: string | undefined;
            ContractInfo?: {
                codeId?: string | undefined;
                creator?: Uint8Array | undefined;
                label?: string | undefined;
                created?: {
                    blockHeight?: string | undefined;
                    txIndex?: string | undefined;
                } | undefined;
                ibcPortId?: string | undefined;
            } | undefined;
        }[] & ({
            contractAddress?: string | undefined;
            ContractInfo?: {
                codeId?: string | undefined;
                creator?: Uint8Array | undefined;
                label?: string | undefined;
                created?: {
                    blockHeight?: string | undefined;
                    txIndex?: string | undefined;
                } | undefined;
                ibcPortId?: string | undefined;
            } | undefined;
        } & {
            contractAddress?: string | undefined;
            ContractInfo?: ({
                codeId?: string | undefined;
                creator?: Uint8Array | undefined;
                label?: string | undefined;
                created?: {
                    blockHeight?: string | undefined;
                    txIndex?: string | undefined;
                } | undefined;
                ibcPortId?: string | undefined;
            } & {
                codeId?: string | undefined;
                creator?: Uint8Array | undefined;
                label?: string | undefined;
                created?: ({
                    blockHeight?: string | undefined;
                    txIndex?: string | undefined;
                } & {
                    blockHeight?: string | undefined;
                    txIndex?: string | undefined;
                } & Record<Exclude<keyof I["contractInfos"][number]["ContractInfo"]["created"], keyof import("../../../secret/compute/v1beta1/types").AbsoluteTxPosition>, never>) | undefined;
                ibcPortId?: string | undefined;
            } & Record<Exclude<keyof I["contractInfos"][number]["ContractInfo"], keyof ContractInfo>, never>) | undefined;
        } & Record<Exclude<keyof I["contractInfos"][number], keyof ContractInfoWithAddress>, never>)[] & Record<Exclude<keyof I["contractInfos"], keyof {
            contractAddress?: string | undefined;
            ContractInfo?: {
                codeId?: string | undefined;
                creator?: Uint8Array | undefined;
                label?: string | undefined;
                created?: {
                    blockHeight?: string | undefined;
                    txIndex?: string | undefined;
                } | undefined;
                ibcPortId?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "contractInfos">, never>>(object: I): QueryContractsByCodeIDResponse;
};
export declare const CodeInfoResponse: {
    encode(message: CodeInfoResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): CodeInfoResponse;
    fromJSON(object: any): CodeInfoResponse;
    toJSON(message: CodeInfoResponse): unknown;
    fromPartial<I extends {
        codeId?: string | undefined;
        creator?: string | undefined;
        codeHash?: string | undefined;
        source?: string | undefined;
        builder?: string | undefined;
    } & {
        codeId?: string | undefined;
        creator?: string | undefined;
        codeHash?: string | undefined;
        source?: string | undefined;
        builder?: string | undefined;
    } & Record<Exclude<keyof I, keyof CodeInfoResponse>, never>>(object: I): CodeInfoResponse;
};
export declare const QueryCodeResponse: {
    encode(message: QueryCodeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCodeResponse;
    fromJSON(object: any): QueryCodeResponse;
    toJSON(message: QueryCodeResponse): unknown;
    fromPartial<I extends {
        codeInfo?: {
            codeId?: string | undefined;
            creator?: string | undefined;
            codeHash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        } | undefined;
        wasm?: Uint8Array | undefined;
    } & {
        codeInfo?: ({
            codeId?: string | undefined;
            creator?: string | undefined;
            codeHash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        } & {
            codeId?: string | undefined;
            creator?: string | undefined;
            codeHash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        } & Record<Exclude<keyof I["codeInfo"], keyof CodeInfoResponse>, never>) | undefined;
        wasm?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof QueryCodeResponse>, never>>(object: I): QueryCodeResponse;
};
export declare const QueryCodesResponse: {
    encode(message: QueryCodesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCodesResponse;
    fromJSON(object: any): QueryCodesResponse;
    toJSON(message: QueryCodesResponse): unknown;
    fromPartial<I extends {
        codeInfos?: {
            codeId?: string | undefined;
            creator?: string | undefined;
            codeHash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        }[] | undefined;
    } & {
        codeInfos?: ({
            codeId?: string | undefined;
            creator?: string | undefined;
            codeHash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        }[] & ({
            codeId?: string | undefined;
            creator?: string | undefined;
            codeHash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        } & {
            codeId?: string | undefined;
            creator?: string | undefined;
            codeHash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        } & Record<Exclude<keyof I["codeInfos"][number], keyof CodeInfoResponse>, never>)[] & Record<Exclude<keyof I["codeInfos"], keyof {
            codeId?: string | undefined;
            creator?: string | undefined;
            codeHash?: string | undefined;
            source?: string | undefined;
            builder?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "codeInfos">, never>>(object: I): QueryCodesResponse;
};
export declare const QueryContractAddressResponse: {
    encode(message: QueryContractAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractAddressResponse;
    fromJSON(object: any): QueryContractAddressResponse;
    toJSON(message: QueryContractAddressResponse): unknown;
    fromPartial<I extends {
        contractAddress?: string | undefined;
    } & {
        contractAddress?: string | undefined;
    } & Record<Exclude<keyof I, "contractAddress">, never>>(object: I): QueryContractAddressResponse;
};
export declare const QueryContractLabelResponse: {
    encode(message: QueryContractLabelResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryContractLabelResponse;
    fromJSON(object: any): QueryContractLabelResponse;
    toJSON(message: QueryContractLabelResponse): unknown;
    fromPartial<I extends {
        label?: string | undefined;
    } & {
        label?: string | undefined;
    } & Record<Exclude<keyof I, "label">, never>>(object: I): QueryContractLabelResponse;
};
export declare const QueryCodeHashResponse: {
    encode(message: QueryCodeHashResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryCodeHashResponse;
    fromJSON(object: any): QueryCodeHashResponse;
    toJSON(message: QueryCodeHashResponse): unknown;
    fromPartial<I extends {
        codeHash?: string | undefined;
    } & {
        codeHash?: string | undefined;
    } & Record<Exclude<keyof I, "codeHash">, never>>(object: I): QueryCodeHashResponse;
};
export declare const DecryptedAnswer: {
    encode(message: DecryptedAnswer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DecryptedAnswer;
    fromJSON(object: any): DecryptedAnswer;
    toJSON(message: DecryptedAnswer): unknown;
    fromPartial<I extends {
        type?: string | undefined;
        input?: string | undefined;
        outputData?: string | undefined;
        outputDataAsString?: string | undefined;
        outputLogs?: {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        outputError?: Uint8Array | undefined;
        plaintextError?: string | undefined;
    } & {
        type?: string | undefined;
        input?: string | undefined;
        outputData?: string | undefined;
        outputDataAsString?: string | undefined;
        outputLogs?: ({
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[] & ({
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        } & {
            type?: string | undefined;
            attributes?: ({
                key?: string | undefined;
                value?: string | undefined;
            }[] & ({
                key?: string | undefined;
                value?: string | undefined;
            } & {
                key?: string | undefined;
                value?: string | undefined;
            } & Record<Exclude<keyof I["outputLogs"][number]["attributes"][number], keyof import("../../../cosmos/base/abci/v1beta1/abci").Attribute>, never>)[] & Record<Exclude<keyof I["outputLogs"][number]["attributes"], keyof {
                key?: string | undefined;
                value?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["outputLogs"][number], keyof StringEvent>, never>)[] & Record<Exclude<keyof I["outputLogs"], keyof {
            type?: string | undefined;
            attributes?: {
                key?: string | undefined;
                value?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        outputError?: Uint8Array | undefined;
        plaintextError?: string | undefined;
    } & Record<Exclude<keyof I, keyof DecryptedAnswer>, never>>(object: I): DecryptedAnswer;
};
/** Query defines the gRPC querier service */
export interface Query {
    /** Query contract info by address */
    contractInfo(request: DeepPartial<QueryByContractAddressRequest>, metadata?: grpc.Metadata): Promise<QueryContractInfoResponse>;
    /** Query code info by id */
    contractsByCodeID(request: DeepPartial<QueryByCodeIDRequest>, metadata?: grpc.Metadata): Promise<QueryContractsByCodeIDResponse>;
    /** Query secret contract */
    querySecretContract(request: DeepPartial<QuerySecretContractRequest>, metadata?: grpc.Metadata): Promise<QuerySecretContractResponse>;
    /** Query a specific contract code by id */
    code(request: DeepPartial<QueryByCodeIDRequest>, metadata?: grpc.Metadata): Promise<QueryCodeResponse>;
    /** Query all contract codes on-chain */
    codes(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<QueryCodesResponse>;
    /** Query code hash by contract address */
    codeHashByContractAddress(request: DeepPartial<QueryByContractAddressRequest>, metadata?: grpc.Metadata): Promise<QueryCodeHashResponse>;
    /** Query code hash by code id */
    codeHashByCodeID(request: DeepPartial<QueryByCodeIDRequest>, metadata?: grpc.Metadata): Promise<QueryCodeHashResponse>;
    /** Query contract label by address */
    labelByAddress(request: DeepPartial<QueryByContractAddressRequest>, metadata?: grpc.Metadata): Promise<QueryContractLabelResponse>;
    /** Query contract address by label */
    addressByLabel(request: DeepPartial<QueryByLabelRequest>, metadata?: grpc.Metadata): Promise<QueryContractAddressResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    contractInfo(request: DeepPartial<QueryByContractAddressRequest>, metadata?: grpc.Metadata): Promise<QueryContractInfoResponse>;
    contractsByCodeID(request: DeepPartial<QueryByCodeIDRequest>, metadata?: grpc.Metadata): Promise<QueryContractsByCodeIDResponse>;
    querySecretContract(request: DeepPartial<QuerySecretContractRequest>, metadata?: grpc.Metadata): Promise<QuerySecretContractResponse>;
    code(request: DeepPartial<QueryByCodeIDRequest>, metadata?: grpc.Metadata): Promise<QueryCodeResponse>;
    codes(request: DeepPartial<Empty>, metadata?: grpc.Metadata): Promise<QueryCodesResponse>;
    codeHashByContractAddress(request: DeepPartial<QueryByContractAddressRequest>, metadata?: grpc.Metadata): Promise<QueryCodeHashResponse>;
    codeHashByCodeID(request: DeepPartial<QueryByCodeIDRequest>, metadata?: grpc.Metadata): Promise<QueryCodeHashResponse>;
    labelByAddress(request: DeepPartial<QueryByContractAddressRequest>, metadata?: grpc.Metadata): Promise<QueryContractLabelResponse>;
    addressByLabel(request: DeepPartial<QueryByLabelRequest>, metadata?: grpc.Metadata): Promise<QueryContractAddressResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryContractInfoDesc: UnaryMethodDefinitionish;
export declare const QueryContractsByCodeIDDesc: UnaryMethodDefinitionish;
export declare const QueryQuerySecretContractDesc: UnaryMethodDefinitionish;
export declare const QueryCodeDesc: UnaryMethodDefinitionish;
export declare const QueryCodesDesc: UnaryMethodDefinitionish;
export declare const QueryCodeHashByContractAddressDesc: UnaryMethodDefinitionish;
export declare const QueryCodeHashByCodeIDDesc: UnaryMethodDefinitionish;
export declare const QueryLabelByAddressDesc: UnaryMethodDefinitionish;
export declare const QueryAddressByLabelDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=query.d.ts.map